-- MySQL Script generated by MySQL Workbench
-- Tue Dec  8 21:26:21 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=1;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=1;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Locations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Locations` (
  `location_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `city` VARCHAR(30) NOT NULL,
  `street` VARCHAR(30) NOT NULL,
  `number` INT(4) UNSIGNED NOT NULL,
  `postal_code` INT(5) UNSIGNED ZEROFILL NOT NULL,
  PRIMARY KEY (`location_id`),
  UNIQUE INDEX `location_id_UNIQUE` (`location_id` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`hotels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`hotels` (
  `hotel_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `location_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`hotel_id`),
  UNIQUE INDEX `hotel_id_UNIQUE` (`hotel_id` ASC) ,
  UNIQUE INDEX `location_id_UNIQUE` (`location_id` ASC) ,
  CONSTRAINT `location_id`
    FOREIGN KEY (`location_id`)
    REFERENCES `mydb`.`Locations` (`location_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`rooms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`rooms` (
  `room_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `number` INT(5) UNSIGNED NOT NULL,
  `hotel_id` INT(10) UNSIGNED NOT NULL,
  `floor` INT(2) NOT NULL,
  `size` INT(2) UNSIGNED NOT NULL,
  `animals` INT(2) UNSIGNED NOT NULL DEFAULT 0,
  `price` DECIMAL(6,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`room_id`),
  UNIQUE INDEX `room_id_UNIQUE` (`room_id` ASC) ,
  INDEX `hotel_id_idx` (`hotel_id` ASC) ,
  CONSTRAINT `hotel_id`
    FOREIGN KEY (`hotel_id`)
    REFERENCES `mydb`.`hotels` (`hotel_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`users` (
  `user_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `login` VARCHAR(20) NOT NULL,
  `password` VARCHAR(20) NOT NULL,
  `email` VARCHAR(320) NOT NULL,
  `role` ENUM('user', 'admin') NOT NULL,
  `phone` VARCHAR(15) NULL,
  `name` VARCHAR(45) NOT NULL,
  `surname` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) ,
  UNIQUE INDEX `login_UNIQUE` (`login` ASC) ,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`reservations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`reservations` (
  `reservation_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `room_id` INT(10) UNSIGNED NOT NULL,
  `user_id` INT(10) UNSIGNED NOT NULL,
  `date_start` DATE NOT NULL,
  `date_end` DATE NOT NULL,
  PRIMARY KEY (`reservation_id`),
  UNIQUE INDEX `reservation_id_UNIQUE` (`reservation_id` ASC) ,
  INDEX `room_id_idx` (`room_id` ASC) ,
  INDEX `user_id_idx` (`user_id` ASC) ,
  CONSTRAINT `room_id`
    FOREIGN KEY (`room_id`)
    REFERENCES `mydb`.`rooms` (`room_id`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `mydb`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`current_guests`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`current_guests` (`hotel_id` INT, `number` INT, `floor` INT, `name` INT, `surname` INT, `date_start` INT, `date_end` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`rooms_prices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`rooms_prices` (`hotel_id` INT, `'najnizsza_cena'` INT, `'najwyzsza_cena'` INT, `srednia_cena` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`rooms_prices_with_address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`rooms_prices_with_address` (`hotel_id` INT, `city` INT, `street` INT, `number` INT, `postal_code` INT, `najnizsza_cena` INT, `najwyzsza_cena` INT, `srednia_cena` INT);

-- -----------------------------------------------------
-- procedure guests_in_hotel
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `guests_in_hotel` (id int)
BEGIN
	SELECT * FROM current_guests
    WHERE hotel_id = id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure avaliable_animals_in_location
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `avaliable_animals_in_location` (location varchar(30))
BEGIN
	SELECT hotel_id, street, Locations.number, postal_code, Rooms.number, floor, size, animals, price
    FROM Rooms
    JOIN Hotels USING (hotel_id)
    JOIN Locations USING (location_id)
    WHERE animals > 0 AND location = city;  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`current_guests`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`current_guests`;
USE `mydb`;
CREATE  OR REPLACE VIEW `current_guests` AS SELECT hotel_id, number, floor, name, surname, date_start, date_end
FROM Users
JOIN Reservations USING (user_id)
JOIN Rooms USING (room_id)
WHERE date_start <= (SELECT curdate()) AND date_end >= (SELECT curdate());

-- -----------------------------------------------------
-- View `mydb`.`rooms_prices`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`rooms_prices`;
USE `mydb`;
CREATE  OR REPLACE VIEW `rooms_prices` AS SELECT 
hotel_id, min(price) AS 'najnizsza_cena', max(price) AS 'najwyzsza_cena', CAST(AVG(`mydb`.`rooms`.`price`) AS decimal(6,2)) AS `srednia_cena`
FROM Rooms JOIN Hotels USING (hotel_id)
GROUP BY hotel_id;

-- -----------------------------------------------------
-- View `mydb`.`rooms_prices_with_address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`rooms_prices_with_address`;
USE `mydb`;
CREATE  OR REPLACE VIEW `rooms_prices_with_address` AS SELECT
hotel_id, city, street, number, postal_code, najnizsza_cena, najwyzsza_cena, srednia_cena
FROM Locations JOIN Hotels USING (location_id)
JOIN rooms_prices USING (hotel_id);
USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`hotels_BEFORE_INSERT` BEFORE INSERT ON `hotels` FOR EACH ROW
BEGIN
	INSERT INTO locations (location_id, city, street, number, postal_code) 
    SELECT new.location_id, 'tba', 'tba', 0, 0
    WHERE(new.location_id NOT IN (SELECT location_id FROM locations));
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`users_BEFORE_INSERT` BEFORE INSERT ON `users` FOR EACH ROW
BEGIN
	IF new.email NOT LIKE '%@%.%'
    THEN signal sqlstate '45000';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`users_BEFORE_UPDATE` BEFORE UPDATE ON `users` FOR EACH ROW
BEGIN
	IF new.email NOT LIKE '%@%.%'
    THEN signal sqlstate '45000';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`reservations_BEFORE_INSERT` BEFORE INSERT ON `reservations` FOR EACH ROW
BEGIN
	IF new.date_start > new.date_end 
    THEN signal sqlstate '45000';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`reservations_BEFORE_UPDATE` BEFORE UPDATE ON `reservations` FOR EACH ROW
BEGIN
	IF new.date_start > new.date_end 
    THEN signal sqlstate '45000';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
